 self.app.route('/api/login', methods=['POST'])
        def login(): # mutexify
            if self.players_in < self.max_players:
                self.players_in += 1
                this_id = self.players_in
                self.players.append(player(self.players_in, request.data.name))
                #await for others/ prompts to be assigned
                return Response(response=jsonpickle.encode({"data":{"id":self.players[this_id].id, "prompt":self.players[this_id][round_num]}, "errMsg": ""}), status=200, mimetype="application/json")
            else:
                return Response(response=jsonpickle.encode({"errMsg": "Too many in game"}), status=400, mimetype="application/json")
        
        self.app.route('/', methods=['GET'])
        def base():
            return "H"
        self.app.run(debug=True)
#    def start(self):
 #       self.app.run(debug=True)

         else:

            # Receive message
            message = receive_message(notified_socket)

            # If False, client disconnected, cleanup
            if message is False:
                print('Closed connection from: {}'.format(clients[notified_socket]['data'].decode('utf-8')))

                # Remove from list for socket.socket()
                sockets_list.remove(notified_socket)

                # Remove from our list of users
                del clients[notified_socket]

                continue

            # Get user by notified socket, so we will know who sent the message
            user = clients[notified_socket]

            print(f'Received message from {user["data"].decode("utf-8")}: {user["message"].decode("utf-8")}')

            # Iterate over connected clients and broadcast message
            for client_socket in clients:

                # But don't sent it to sender
                if client_socket != notified_socket:

                    # Send user and message (both with their headers)
                    # We are reusing here message header sent by sender, and saved username header send by user when he connected
                    client_socket.send(user['header'] + user['data'] + message['header'] + message['data'])




